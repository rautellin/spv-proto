// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: activity/v1/activity.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	GetActivities(ctx context.Context, in *GetActivitiesRequest, opts ...grpc.CallOption) (*GetActivitiesResponse, error)
	MarkActivitiesAsRead(ctx context.Context, in *MarkActivitiesAsReadRequest, opts ...grpc.CallOption) (*MarkActivitiesAsReadResponse, error)
	GetUnreadActivitiesCount(ctx context.Context, in *GetUnreadActivitiesCountRequest, opts ...grpc.CallOption) (*GetUnreadActivitiesCountResponse, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) GetActivities(ctx context.Context, in *GetActivitiesRequest, opts ...grpc.CallOption) (*GetActivitiesResponse, error) {
	out := new(GetActivitiesResponse)
	err := c.cc.Invoke(ctx, "/activity.v1.ActivityService/GetActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) MarkActivitiesAsRead(ctx context.Context, in *MarkActivitiesAsReadRequest, opts ...grpc.CallOption) (*MarkActivitiesAsReadResponse, error) {
	out := new(MarkActivitiesAsReadResponse)
	err := c.cc.Invoke(ctx, "/activity.v1.ActivityService/MarkActivitiesAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetUnreadActivitiesCount(ctx context.Context, in *GetUnreadActivitiesCountRequest, opts ...grpc.CallOption) (*GetUnreadActivitiesCountResponse, error) {
	out := new(GetUnreadActivitiesCountResponse)
	err := c.cc.Invoke(ctx, "/activity.v1.ActivityService/GetUnreadActivitiesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations must embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	GetActivities(context.Context, *GetActivitiesRequest) (*GetActivitiesResponse, error)
	MarkActivitiesAsRead(context.Context, *MarkActivitiesAsReadRequest) (*MarkActivitiesAsReadResponse, error)
	GetUnreadActivitiesCount(context.Context, *GetUnreadActivitiesCountRequest) (*GetUnreadActivitiesCountResponse, error)
	mustEmbedUnimplementedActivityServiceServer()
}

// UnimplementedActivityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) GetActivities(context.Context, *GetActivitiesRequest) (*GetActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (UnimplementedActivityServiceServer) MarkActivitiesAsRead(context.Context, *MarkActivitiesAsReadRequest) (*MarkActivitiesAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkActivitiesAsRead not implemented")
}
func (UnimplementedActivityServiceServer) GetUnreadActivitiesCount(context.Context, *GetUnreadActivitiesCountRequest) (*GetUnreadActivitiesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnreadActivitiesCount not implemented")
}
func (UnimplementedActivityServiceServer) mustEmbedUnimplementedActivityServiceServer() {}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.v1.ActivityService/GetActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetActivities(ctx, req.(*GetActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_MarkActivitiesAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkActivitiesAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).MarkActivitiesAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.v1.ActivityService/MarkActivitiesAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).MarkActivitiesAsRead(ctx, req.(*MarkActivitiesAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetUnreadActivitiesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnreadActivitiesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetUnreadActivitiesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/activity.v1.ActivityService/GetUnreadActivitiesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetUnreadActivitiesCount(ctx, req.(*GetUnreadActivitiesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity.v1.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActivities",
			Handler:    _ActivityService_GetActivities_Handler,
		},
		{
			MethodName: "MarkActivitiesAsRead",
			Handler:    _ActivityService_MarkActivitiesAsRead_Handler,
		},
		{
			MethodName: "GetUnreadActivitiesCount",
			Handler:    _ActivityService_GetUnreadActivitiesCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "activity/v1/activity.proto",
}
