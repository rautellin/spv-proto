// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: time_report/v1/time_report.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeReportServiceClient is the client API for TimeReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeReportServiceClient interface {
	GetTimeReports(ctx context.Context, in *GetTimeReportsRequest, opts ...grpc.CallOption) (*GetTimeReportsResponse, error)
	GetTimeReport(ctx context.Context, in *GetTimeReportRequest, opts ...grpc.CallOption) (*GetTimeReportResponse, error)
	CreateTimeReport(ctx context.Context, in *CreateTimeReportRequest, opts ...grpc.CallOption) (*CreateTimeReportResponse, error)
	UpdateTimeReport(ctx context.Context, in *UpdateTimeReportRequest, opts ...grpc.CallOption) (*UpdateTimeReportResponse, error)
}

type timeReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeReportServiceClient(cc grpc.ClientConnInterface) TimeReportServiceClient {
	return &timeReportServiceClient{cc}
}

func (c *timeReportServiceClient) GetTimeReports(ctx context.Context, in *GetTimeReportsRequest, opts ...grpc.CallOption) (*GetTimeReportsResponse, error) {
	out := new(GetTimeReportsResponse)
	err := c.cc.Invoke(ctx, "/time_report.v1.TimeReportService/GetTimeReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeReportServiceClient) GetTimeReport(ctx context.Context, in *GetTimeReportRequest, opts ...grpc.CallOption) (*GetTimeReportResponse, error) {
	out := new(GetTimeReportResponse)
	err := c.cc.Invoke(ctx, "/time_report.v1.TimeReportService/GetTimeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeReportServiceClient) CreateTimeReport(ctx context.Context, in *CreateTimeReportRequest, opts ...grpc.CallOption) (*CreateTimeReportResponse, error) {
	out := new(CreateTimeReportResponse)
	err := c.cc.Invoke(ctx, "/time_report.v1.TimeReportService/CreateTimeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeReportServiceClient) UpdateTimeReport(ctx context.Context, in *UpdateTimeReportRequest, opts ...grpc.CallOption) (*UpdateTimeReportResponse, error) {
	out := new(UpdateTimeReportResponse)
	err := c.cc.Invoke(ctx, "/time_report.v1.TimeReportService/UpdateTimeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeReportServiceServer is the server API for TimeReportService service.
// All implementations must embed UnimplementedTimeReportServiceServer
// for forward compatibility
type TimeReportServiceServer interface {
	GetTimeReports(context.Context, *GetTimeReportsRequest) (*GetTimeReportsResponse, error)
	GetTimeReport(context.Context, *GetTimeReportRequest) (*GetTimeReportResponse, error)
	CreateTimeReport(context.Context, *CreateTimeReportRequest) (*CreateTimeReportResponse, error)
	UpdateTimeReport(context.Context, *UpdateTimeReportRequest) (*UpdateTimeReportResponse, error)
	mustEmbedUnimplementedTimeReportServiceServer()
}

// UnimplementedTimeReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeReportServiceServer struct {
}

func (UnimplementedTimeReportServiceServer) GetTimeReports(context.Context, *GetTimeReportsRequest) (*GetTimeReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeReports not implemented")
}
func (UnimplementedTimeReportServiceServer) GetTimeReport(context.Context, *GetTimeReportRequest) (*GetTimeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeReport not implemented")
}
func (UnimplementedTimeReportServiceServer) CreateTimeReport(context.Context, *CreateTimeReportRequest) (*CreateTimeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimeReport not implemented")
}
func (UnimplementedTimeReportServiceServer) UpdateTimeReport(context.Context, *UpdateTimeReportRequest) (*UpdateTimeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeReport not implemented")
}
func (UnimplementedTimeReportServiceServer) mustEmbedUnimplementedTimeReportServiceServer() {}

// UnsafeTimeReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeReportServiceServer will
// result in compilation errors.
type UnsafeTimeReportServiceServer interface {
	mustEmbedUnimplementedTimeReportServiceServer()
}

func RegisterTimeReportServiceServer(s grpc.ServiceRegistrar, srv TimeReportServiceServer) {
	s.RegisterService(&TimeReportService_ServiceDesc, srv)
}

func _TimeReportService_GetTimeReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeReportServiceServer).GetTimeReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_report.v1.TimeReportService/GetTimeReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeReportServiceServer).GetTimeReports(ctx, req.(*GetTimeReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeReportService_GetTimeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeReportServiceServer).GetTimeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_report.v1.TimeReportService/GetTimeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeReportServiceServer).GetTimeReport(ctx, req.(*GetTimeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeReportService_CreateTimeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeReportServiceServer).CreateTimeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_report.v1.TimeReportService/CreateTimeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeReportServiceServer).CreateTimeReport(ctx, req.(*CreateTimeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeReportService_UpdateTimeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeReportServiceServer).UpdateTimeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/time_report.v1.TimeReportService/UpdateTimeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeReportServiceServer).UpdateTimeReport(ctx, req.(*UpdateTimeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeReportService_ServiceDesc is the grpc.ServiceDesc for TimeReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "time_report.v1.TimeReportService",
	HandlerType: (*TimeReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimeReports",
			Handler:    _TimeReportService_GetTimeReports_Handler,
		},
		{
			MethodName: "GetTimeReport",
			Handler:    _TimeReportService_GetTimeReport_Handler,
		},
		{
			MethodName: "CreateTimeReport",
			Handler:    _TimeReportService_CreateTimeReport_Handler,
		},
		{
			MethodName: "UpdateTimeReport",
			Handler:    _TimeReportService_UpdateTimeReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time_report/v1/time_report.proto",
}
